import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";

import { decrementTrainingInfoReproduce, fetchTraining } from "../../../common/reducers/training/trainingSlice";
import { fetchHome } from "../../../common/reducers/homeSlice";
import { Link } from "react-router-dom";

import { addScore, nextRound, clearTraining, clearRound, clearScore } from "../../../common/reducers/training/reproduceSlice";

import Header from "../components/Header";
import WordCard from "../components/WordCard";
import End from "../components/End";
import Hint from "./components/Hint";
import AnswerButton from "../components/AnswerButton";

function Reproduce() {
    const dispatch = useDispatch();

    const { count_word_to_training_reproduce, loading, patchLoading, error } = useSelector((state) => state.training);
    const { reproduce, round, score } = useSelector((state) => state.reproduce);
    const { learning_words } = useSelector((state) => state.home);

    // –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    const [selectedAnswer, setSelectedAnswer] = useState(null);

    // –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–æ–≤–∞
    const [isEnd, setIsEnd] = useState(false);
    const localType = "reproduce";
    const training = reproduce;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    useEffect(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª–æ–≤–∏—è:
        // 1. –ú–∞—Å—Å–∏–≤ training –ª–∏–±–æ –ø—É—Å—Ç–æ–π, –ª–∏–±–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (training —è–≤–ª—è–µ—Ç—Å—è falsy –∑–Ω–∞—á–µ–Ω–∏–µ–º)
        // 2. –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è patchLoading –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ false (falsy –∑–Ω–∞—á–µ–Ω–∏–µ)
        // –ï—Å–ª–∏ –≤—Å–µ —ç—Ç–∏ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

        if (!training & !patchLoading) {
            dispatch(fetchTraining(localType));
        }

        if (!learning_words) {
            dispatch(fetchHome());
        }
    }, [dispatch, isEnd]);

    const handleInputChange = (event) => {
        setSelectedAnswer(event.target.value);
    };

    function checkRound(is_correct) {
        if (is_correct) {
            // –ø—Ä–∏–±–∞–≤–ª—è–µ–º –±–∞–ª–ª –∑–∞ –ø—Ä–∞–≤–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            dispatch(addScore());
        }
        // –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—ã–π —Ä–∞—É–Ω–¥
        if (round + 1 == training.length) {
            setIsEnd(true); // –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
            dispatch(clearTraining()); // –æ—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π training
            dispatch(clearRound()); // —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞
        } else {
            dispatch(nextRound()); // —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
        }
    }

    const EndingPage = <End type={localType} count_word_to_training={count_word_to_training_reproduce} setIsEnd={setIsEnd} score={score} clearScore={clearScore}/>
    
    const loadingView = <p>Loading...</p>
    
    const RoundPage = (training && ( 
        <div>
            <Header round={round} trainingLength={training.length} />
            <main className="container px-4">
                <WordCard text={training && training[round].word.translation} lvl={training && training[round].recognize_lvl} />
                <div className="mb-4">
                    <div className="mb-4">
                        <h3 className="text-center mb-3">–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç</h3>
                        <input type="text" className="form-control py-2-5 mb-2" value={selectedAnswer ? selectedAnswer : ""} onChange={handleInputChange} />
                    </div>

                    <Hint text={training[round].word.text} />
                </div>
                <AnswerButton
                    localType={localType}
                    selectedAnswer={selectedAnswer}
                    currentTraining={training}
                    setSelectedAnswer={setSelectedAnswer}
                    currentRound={round}
                    checkRound={checkRound}
                    decrementTrainingInfo={decrementTrainingInfoReproduce}
                />
            </main>
        </div>
     )) 
    const ErrorPage = <p>Error: {error}</p>;
    const NoMoreWords = (!training & (learning_words != 0) && ( 
        <div className="align-items-center">
            <div className="container sticky-top mb-3 pt-2">
                <nav className="navbar dark-nav">
                    <div className="container-fluid">
                        <span className="navbar-brand">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</span>
                    </div>
                </nav>
            </div>
            <div className="container">
                <div className="text-center mt-5">
                    <div className="px-4 pt-5 mt-5 text-center">
                        <h1 className="fw-bold mt-3 text-body-emphasis">–í—Å–µ —Å–ª–æ–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω—ã ü•∞</h1>
                        <div className="col-lg-8 mx-auto">
                            <p className="lead mb-4">
                                <span>–ò–∑—É—á–µ–Ω–Ω—ã—Ö –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: <b className="btn btn-success">{learning_words}</b></span> <br />
                                <span>–ß–∏—Ç–∞–π—Ç–µ –±–æ–ª—å—à–µ –∏ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞</span>
                            </p>
                            <div className="d-grid gap-2 d-sm-flex justify-content-sm-center mb-5">
                                <Link to="/books" className="btn btn-primary px-4">
                                    –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞
                                </Link>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
     )) 

    const NoWords = <p>–£ –≤–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, –∏—Ö –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å</p>


    return (
        <div className="align-items-center">
            {loading ? ( loadingView ) : (
            (isEnd && EndingPage ) ||  ( RoundPage ) ||
            (error && ErrorPage) || ( NoMoreWords ) ||  NoWords )}
        </div>
    );
}

export default Reproduce;
