import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";

import { fetchTraining, fetchTrainingPatch, nextRound, addScore, clearRound, decrementTrainingInfoRecognize } from "../../../common/reducers/trainingSlice";
import { fetchHome } from "../../../common/reducers/homeSlice";

import Header from "../Header";
import WordCard from "../WordCard";
import FalseSet from "./components/FalseSet";
import { Link } from "react-router-dom";
import End from "../End";

import Loading from "../../../common/components/Loading";

function Recognize() {
    const dispatch = useDispatch();
    const { training, round, count_word_to_training_recognize, loading, error } = useSelector((state) => state.training);
    const { learning_words } = useSelector((state) => state.home);
    const type = "recognize";
    // –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    const [selectedAnswer, setSelectedAnswer] = useState(null);

    // –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–∞—Å—Å–∏–≤–∞ –ª–æ–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    const [falseSet, setFalseSet] = useState(null);

    // –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–æ–≤–∞
    const [isEnd, setIsEnd] = useState(false);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    useEffect(() => {
        if (!training) {
            dispatch(fetchTraining("recognize"));
            console.log("fetch");
        }

        if (!learning_words) {
            dispatch(fetchHome());
        }
    }, [dispatch]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –ª–æ–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    function makeFalseSet(falseAnswers, correctAnswer) {
        const falseSet = [...falseAnswers];
        falseSet.push(correctAnswer);

        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ —Å –ø–æ–º–æ—â—å—é –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –§–∏—à–µ—Ä–∞-–ô–µ—Ç—Å–∞
        for (let i = falseSet.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [falseSet[i], falseSet[j]] = [falseSet[j], falseSet[i]];
        }
        return falseSet;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –ª–æ–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞
    useEffect(() => {
        if (training) {
            const falseAnswers = training[round].false_set;
            const correctAnswer = {
                text: training[round].word.text,
                translation: training[round].word.translation,
            };
            setFalseSet(makeFalseSet(falseAnswers, correctAnswer));
        }
    }, [round, training]);

    function checkRound() {
        // –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—ã–π —Ä–∞—É–Ω–¥
        if (round + 1 == training.length) {
            setIsEnd(true); // –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
            dispatch(clearRound()); // –æ—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π round
        } else {
            dispatch(nextRound()); // —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    function handleFinalAnswer() {
        if (selectedAnswer !== null) {
            const is_correct = checkAnswer(selectedAnswer);
            const data = {
                type: type,
                pk: training[round].pk,
                is_correct: is_correct,
            };
            // –æ—Ç–Ω–∏–º–∞–µ–º –æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞ 1
            dispatch(decrementTrainingInfoRecognize());

            dispatch(fetchTrainingPatch(data)); // –æ—Ç–±–æ–≤–ª—è–µ—Ç –±–¥

            if (is_correct) {
                // –ø—Ä–∏–±–∞–≤–ª—è–µ–º –±–∞–ª–ª –∑–∞ –ø—Ä–∞–≤–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                dispatch(addScore());
            }
            setSelectedAnswer(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
            checkRound();
        } else {
            // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
            console.log("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç");
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
    function checkAnswer(answerWord) {
        return training[round].word.text == answerWord;
    }

    return (
        <div className="align-items-center">
            {(isEnd && <End type={type} count_word_to_training={count_word_to_training_recognize} />) ||
                (training && (
                    <>
                        <Header />
                        <main className="container px-4">
                            <WordCard />
                            <div className="mb-4">
                                <h3 className="text-center mb-3">–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞</h3>
                                {falseSet &&
                                    falseSet.map((word, index) => (
                                        <FalseSet key={index} word={word} index={index} selectedAnswer={selectedAnswer} setSelectedAnswer={setSelectedAnswer} />
                                    ))}
                            </div>

                            <div className="d-flex justify-content-center my-4" onClick={handleFinalAnswer}>
                                <button type="text" className={`btn btn-primary save-btn py-2 w-50 ${selectedAnswer === null ? "disabled" : ""}`}>
                                    <span>
                                        <b>–û—Ç–≤–µ—Ç–∏—Ç—å</b>
                                    </span>
                                </button>
                            </div>
                        </main>
                    </>
                )) ||
                (loading && <p>Loading...</p>) ||
                (error && <p>Error: {error}</p>) ||
                (!training & (learning_words != 0) && (
                    <div className="align-items-center">
                        <div className="container sticky-top mb-3 pt-2">
                            <nav className="navbar dark-nav">
                                <div className="container-fluid">
                                <span className="navbar-brand">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</span>
                                    <Link className="pt-1 color-svg" to="/profile">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" fill="currentColor" class="bi bi-gear-fill" viewBox="0 0 16 16">
                                            <path d="M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z"/>
                                        </svg>
                                    </Link>
                                </div>
                            </nav>
                        </div>
                        <div className="container">
                            <div className="text-center mt-5">
                                <div className="px-4 pt-5 mt-5 text-center">
                                    <h1 className="fw-bold mt-3 text-body-emphasis">–í—Å–µ —Å–ª–æ–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω—ã ü•∞</h1>
                                    <div className="col-lg-8 mx-auto">
                                        <p className="lead mb-4">
                                            <span>–ò–∑—É—á–µ–Ω–Ω—ã—Ö –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: <b className="btn btn-success">{learning_words}</b></span> <br />
                                            <span>–ß–∏—Ç–∞–π—Ç–µ –±–æ–ª—å—à–µ –∏ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞</span>
                                        </p>
                                        <div className="d-grid gap-2 d-sm-flex justify-content-sm-center mb-5">
                                            <Link to="/books" className="btn btn-primary px-4">
                                                –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞
                                            </Link>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                )) || <p>–£ –≤–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, –∏—Ö –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å</p>}
        </div>
    );
}

export default Recognize;
