import { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { fetchVocabulary } from "../../common/reducers/vocabularySlice";
import Block from "./components/Block";
import SearchFilter from "../../common/components/Headers/SearchFilter";
import Filter from "../../common/components/Headers/Filter";
import Loading from "../../common/components/Treatment/Loading";
import PaginationButton from "../../common/components/Pagination/PagePagination";

import { vocabulary as vocabularyPath } from "../../../public/urls";

function WordList() {
  const dispatch = useDispatch();
  const { words, loading } = useSelector((state) => state.vocabulary);
  const [currentPage, setCurrentPage] = useState(1);



  // –∫–æ–º–ø–æ–Ω–µ–Ω—Ç wordList –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
  // —Ç—É—Ç —Ç—ã –µ–≥–æ –Ω–∞–≥—Ä—É–∂–∞–µ—à—å –±–æ–ª—å—à–∏–º –∫–æ–ª-–≤–æ state, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏–∫–∞–∫ –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è 
  // –∫ –¥–∞–Ω–Ω–æ–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É.
  // —ç—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ solid, –∞ –∏–º–µ–Ω–Ω–æ –±—É–∫–≤—ã S
  // –ø–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–æ—Å–∏–∫–∏ –ø—Ä–æ –ø—Ä–∏–Ω—Ü—ã–ø solid

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –ø–æ–∏—Å–∫–∞
  const [order, setOrder] = useState("date_added");
  const [direction, setDirection] = useState("DESC");
  const [filter, setFilter] = useState(null);
  const [value, setValue] = useState("");
  const [searchQuery, setSearchQuery] = useState("");

  useEffect(() => {
    const queryParams = new URLSearchParams({
      page: currentPage,
      order,
      direction,
      ...(filter && value ? { filter, value } : {}),
      ...(searchQuery ? { search: searchQuery } : {}),
    });

    const queryString = queryParams.toString(); // —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    dispatch(fetchVocabulary(`?${queryString}`)); // –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å

    // –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å useEffect —Ç–∞–∫–∏–º –±–æ–ª—å—à–∏–º –∫–æ–ª-–≤–æ prors`–æ–≤
    // –æ–Ω –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–¥—Ç—è–Ω—É—Ç—å —Å –±–µ–∫–∞ words –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –∏ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü. –≤–æ—Ç –µ–≥–æ –ø—Ä–µ—ã–¥—É—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ [dispatch, currentPage]
    // –æ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ dispatch –º–æ–∂–Ω–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –∏ —É –Ω–∞—Å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ currentPage
    // –Ω–æ —Ç—É—Ç –ø–æ—è–≤–∏—Ç—Å—è —Å–ª–µ–¥. –ø—Ä–æ—Å–±–ª–µ–º–∞, –∫–æ–≥–¥–∞ –±—É–¥—É—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã, –¥–æ–ø—É—Å—Ç–∏–º
    // –Ω–∞ order=lvl_sum –∏ –º—ã –Ω–∞–∂–º–µ–º "–ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä" –±—É–¥–µ—Ç –≤—Å–µ –∫—É–ª–ª, –∏ –≤—ã–¥–∞—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –¥–æ–ø—É—Å—Ç–∏–º, –Ω–∞ 30 —Å—Ç—Ä–∞–Ω–∏—Ü, –Ω–æ –µ—Å–ª–∏ –º—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–º —Å—Ç—Ä. –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é, —Ç–æ —Ñ–∏–ª—å—Ç—Ä —Å–±—Ä–æ—Å–∏—Ç—å—Å—è.

    // –ª—É—á—à–∏–º —Ä–µ—à–µ–Ω–∏–µ–º, –∫–∞–∫ —è —Å—á–∏—Ç–∞—é, —ç—Ç–æ –ø–µ—Ä–µ–ª–æ–∂–∏—Ç—å –≤—Å—é –æ—Ç–≤–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é fetchVocabulary
    // –µ—Å–ª–∏ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, —Ç–æ –Ω–∏ WordList, –Ω–µ Filter –Ω–µ Search –¥–µ–ª–æ –Ω–µ –±—É–¥–µ—Ç –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ —Ç–∞–º –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–π –Ω—É–∂–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ –≤—Å–µ.
  }, [dispatch, currentPage, order, direction, filter, value, searchQuery]);

  const handleSearch = (query) => {
    setSearchQuery(query); // –û–±–Ω–æ–≤–ª—è–µ–º query –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
    setCurrentPage(1); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –ø–µ—Ä–≤—É—é
  };

  const handleClearSearch = () => {
    setSearchQuery(""); // –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–∏—Å–∫–∞
    setCurrentPage(1); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –ø–µ—Ä–≤—É—é
  };

  const PaginationButtonView = words?.page_count > 1 && (
    <PaginationButton
      currentPage={currentPage}
      pageCount={words?.page_count}
      setCurrentPage={setCurrentPage}
    />
  );

  return (
    <div className="align-items-center">
      <SearchFilter
        title="–í—Å–µ —Å–ª–æ–≤–∞"
        // vocabularyPath –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ SearchFilter –∞ –Ω–µ —Ç—É—Ç
        endpoint={vocabularyPath}
        onSearch={handleSearch}
        onClear={handleClearSearch}
      />
      <Filter
        setOrder={setOrder}
        setDirection={setDirection}
        setFilter={setFilter}
        setValue={setValue}
      />
      {loading & words == null ? (
        <Loading />
      ) : (
        <main className="container pb-5 mb-3">
          <div className="row row-cols-2 row-cols-sm-3 row-cols-md-4 row-cols-lg-4 g-4 mb-5">
            {words && words.results && words.results.length > 0 ? (
              words.results.map((item, index) => (
                <Block item={item} key={index} />
              ))
            ) : (
              <div className="col-12 w-100">
                <div className="card py-3 px-2">
                  <div className="text-center">
                    <h4 className="fw-bold mt-3 text-body-emphasis">
                      –£ –≤–∞—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ üòî
                    </h4>
                  </div>
                </div>
              </div>
            )}
          </div>
          {PaginationButtonView}
        </main>
      )}
    </div>
  );
}

export default WordList;
